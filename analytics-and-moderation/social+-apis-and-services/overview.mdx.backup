---
title: "social.plus APIs and Services Overview"
description: "Server-to-server APIs for programmatic administration, moderation, and advanced automation"
---

# social.plus APIs and Services

Integrate powerful administrative capabilities directly into your applications with social.plus REST APIs. Access the same functionality available in the console programmatically, enabling automated workflows, custom integrations, and advanced community management features.

<Info>
**Server-Side Only**: These APIs are designed for server-to-server communication and require admin-level authentication. Never expose admin credentials in client-side applications.
</Info>

<CardGroup cols={2}>
  <Card title="Authentication" icon="key" href="authentication">
    Admin and user access tokens, secure mode, and API authentication
  </Card>
  <Card title="Moderation APIs" icon="shield-check" href="moderation-apis">
    Programmatic content moderation, user management, and safety controls
  </Card>
  <Card title="Analytics APIs" icon="chart-bar" href="analytics-apis">
    Access community metrics, user data, and business intelligence programmatically
  </Card>
  <Card title="Webhook Integration" icon="webhook" href="webhooks">
    Real-time event notifications and automated response systems
  </Card>
</CardGroup>

## Core API Categories

### **Administrative Functions**
- **User Management**: Create, update, and manage user accounts
- **Content Operations**: Bulk content management and moderation actions
- **Network Configuration**: Application settings and policy management
- **Reporting**: Generate and export analytics data

### **Moderation Automation**
- **Content Review**: Automated flagging and approval workflows
- **User Actions**: Programmatic bans, warnings, and restrictions
- **Policy Enforcement**: Custom rules and violation handling
- **Appeal Processing**: Automated appeal workflows and notifications

### **Analytics & Insights**
- **Usage Metrics**: Access MAU, DAU, and engagement statistics
- **Content Analytics**: Performance data for posts, comments, and media
- **Moderation Reports**: Safety metrics and policy effectiveness data
- **Custom Reporting**: Generate tailored reports for business needs

## Getting Started

<Steps>
  <Step title="Obtain Admin Access Token">
    Generate an admin access token from your console under **Settings** â†’ **Admin Users**
  </Step>
  
  <Step title="Choose Authentication Method">
    Select between admin tokens for server operations or user tokens for user-context actions
  </Step>
  
  <Step title="Configure API Client">
    Set up your server environment with proper authentication and regional endpoints
  </Step>
  
  <Step title="Test Integration">
    Start with simple API calls to verify connectivity and permissions
  </Step>
</Steps>

## Authentication Methods

### **Admin Access Token**

For server-to-server administrative operations:

```bash
curl -X 'GET' \
  'https://apix.<region>.amity.co/api/v3/users' \
  -H 'accept: application/json' \
  -H 'x-admin-token: <your-admin-token>'
```

<Warning>
**Security**: Admin tokens provide full access to your application data. Store them securely and never expose them in client-side code or public repositories.
</Warning>

### **User Access Token**

For operations in user context:

```bash
# 1. Get authentication token with server key
curl -X 'GET' \
  'https://apix.<region>.amity.co/api/v3/authentication/token?userId=<userId>' \
  -H 'x-server-key: <your-server-key>'

# 2. Create user session
curl -X 'POST' \
  'https://apix.<region>.amity.co/api/v3/sessions' \
  -H 'x-api-key: <api-key>' \
  -H 'Content-Type: application/json' \
  -d '{
    "userId": "<userId>",
    "deviceId": "server",
    "authToken": "<authentication-token>"
  }'
```

### **Secure Mode**

Enhanced security with server key authentication:

- **Additional Security Layer**: Requires server-level authentication
- **Token Generation**: Server key needed to generate user tokens
- **Enterprise Feature**: Available for production deployments

## Common Use Cases

<AccordionGroup>
  <Accordion title="Automated Moderation">
    **Content Monitoring**
    - Set up automated scanning for new content
    - Apply custom moderation rules based on community guidelines
    - Integrate with external moderation services
    - Handle bulk content operations efficiently
    
    **User Behavior Management**
    - Automatically flag suspicious user patterns
    - Implement graduated response systems
    - Handle coordinated abuse or spam campaigns
    - Maintain audit trails for compliance
  </Accordion>
  
  <Accordion title="Business Intelligence">
    **Custom Analytics**
    - Export data to business intelligence tools
    - Create custom reports for stakeholders
    - Track KPIs specific to your business model
    - Integrate with existing analytics platforms
    
    **Growth Analysis**
    - Monitor user acquisition and retention
    - Track feature adoption and usage patterns
    - Analyze community health indicators
    - Generate executive dashboards
  </Accordion>
  
  <Accordion title="Workflow Automation">
    **User Lifecycle Management**
    - Automate user onboarding processes
    - Handle account verification and upgrades
    - Manage subscription and billing integrations
    - Implement custom user journey flows
    
    **Content Operations**
    - Bulk import/export of content
    - Automated content promotion and featuring
    - Cross-platform content synchronization
    - Content archival and cleanup processes
  </Accordion>
</AccordionGroup>

## API Best Practices

### **Rate Limiting & Performance**
- Respect API rate limits to avoid throttling
- Implement exponential backoff for retry logic
- Use batch operations when available for efficiency
- Cache responses appropriately to reduce API calls

### **Error Handling**
- Implement comprehensive error handling for all API calls
- Log errors with sufficient detail for debugging
- Provide graceful degradation when APIs are unavailable
- Monitor API response times and success rates

### **Security**
- Store API keys and tokens in secure environment variables
- Rotate tokens regularly for enhanced security
- Use HTTPS for all API communications
- Implement IP whitelisting where possible

## Regional Endpoints

Different regions have specific API endpoints for optimal performance:

| Region | API Endpoint |
|--------|-------------|
| **US East** | `https://apix.us-east-1.amity.co` |
| **Europe** | `https://apix.eu-central-1.amity.co` |
| **Singapore** | `https://apix.ap-southeast-1.amity.co` |

<Tip>
**Performance Optimization**: Always use the regional endpoint closest to your server infrastructure for best performance and lowest latency.
</Tip>

## Integration Examples

### **Automated Content Review**

```python
import requests
import json

class AmityModerationAPI:
    def __init__(self, admin_token, region='us-east-1'):
        self.admin_token = admin_token
        self.base_url = f'https://apix.{region}.amity.co'
        self.headers = {
            'accept': 'application/json',
            'x-admin-token': admin_token
        }
    
    def get_flagged_content(self, limit=50):
        """Retrieve content pending moderation review"""
        response = requests.get(
            f'{self.base_url}/api/v3/moderation/queue',
            headers=self.headers,
            params={'limit': limit, 'status': 'pending'}
        )
        return response.json()
    
    def moderate_content(self, content_id, action, reason):
        """Take moderation action on content"""
        payload = {
            'action': action,  # 'approve', 'remove', 'escalate'
            'reason': reason,
            'moderator_id': 'automated_system'
        }
        response = requests.post(
            f'{self.base_url}/api/v3/moderation/content/{content_id}/action',
            headers=self.headers,
            json=payload
        )
        return response.json()
```

### **User Analytics Export**

```javascript
const axios = require('axios');

class AmityAnalyticsAPI {
    constructor(adminToken, region = 'us-east-1') {
        this.adminToken = adminToken;
        this.baseURL = `https://apix.${region}.amity.co`;
        this.headers = {
            'accept': 'application/json',
            'x-admin-token': adminToken
        };
    }
    
    async getUserMetrics(startDate, endDate) {
        try {
            const response = await axios.get(`${this.baseURL}/api/v3/analytics/users`, {
                headers: this.headers,
                params: {
                    start_date: startDate,
                    end_date: endDate,
                    metrics: ['dau', 'mau', 'retention']
                }
            });
            return response.data;
        } catch (error) {
            console.error('Analytics API Error:', error.response?.data || error.message);
            throw error;
        }
    }
    
    async exportUserData(filters = {}) {
        const response = await axios.post(`${this.baseURL}/api/v3/export/users`, {
            filters,
            format: 'csv'
        }, { headers: this.headers });
        
        return response.data.export_url;
    }
}
```

## Webhook Integration

Set up real-time event notifications to automate responses:

```json
{
  "event": "content.flagged",
  "timestamp": "2025-06-18T10:30:00Z",
  "data": {
    "content_id": "post_12345",
    "content_type": "post",
    "flag_reason": "inappropriate_content",
    "reporter_id": "user_67890",
    "confidence_score": 0.85
  }
}
```

## Next Steps

<CardGroup cols={2}>
  <Card title="API Reference" icon="book" href="https://api-docs.amity.co/">
    Complete API documentation with endpoints and examples
  </Card>
  <Card title="Authentication Guide" icon="shield" href="authentication">
    Detailed setup for admin and user authentication methods  
  </Card>
  <Card title="Webhook Setup" icon="webhook" href="webhooks">
    Configure real-time event notifications and automated responses
  </Card>
  <Card title="Code Examples" icon="code" href="examples">
    Practical implementation examples in multiple programming languages
  </Card>
</CardGroup>

<Warning>
**Production Considerations**: Test all API integrations thoroughly in a development environment before deploying to production. Monitor API usage and implement proper error handling and logging.
</Warning>
